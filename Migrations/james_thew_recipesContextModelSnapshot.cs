// <auto-generated />
using System;
using James_Thew.Models.db_models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace James_Thew.Migrations
{
    [DbContext(typeof(james_thew_recipesContext))]
    partial class james_thew_recipesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("James_Thew.Models.db_models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasColumnType("text");

                    b.Property<string>("AdminName")
                        .HasColumnType("text");

                    b.Property<string>("AdminPassword")
                        .HasColumnType("text");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AnnouncementDate")
                        .HasColumnType("date");

                    b.Property<string>("AnnouncementText")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("date");

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContestID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContestDescription")
                        .HasColumnType("text");

                    b.Property<string>("ContestTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.ContestEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContestId")
                        .HasColumnType("int")
                        .HasColumnName("ContestID");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("date");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("TipId")
                        .HasColumnType("int")
                        .HasColumnName("TipID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("EntryId")
                        .HasName("PK__ContestE__F57BD2D7E1650755");

                    b.HasIndex("ContestId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("TipId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestEntries");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("date");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IngredientID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IngredientName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.HasKey("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecipeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("RecipeImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RecipeTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("RecipeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StepID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int")
                        .HasColumnName("RecipeID");

                    b.Property<int?>("StepNumber")
                        .HasColumnType("int");

                    b.HasKey("StepId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Tip", b =>
                {
                    b.Property<int>("TipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("TipText")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TipId");

                    b.HasIndex("UserId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MembershipType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Profile_pic");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Announcement", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Announcem__UserI__3C69FB99");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Comment", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Comments__Recipe__440B1D61");

                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comments__UserID__4316F928");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Contest", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("Contests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Contests__UserID__33D4B598");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.ContestEntry", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.Contest", "Contest")
                        .WithMany("ContestEntries")
                        .HasForeignKey("ContestId")
                        .HasConstraintName("FK__ContestEn__Conte__36B12243");

                    b.HasOne("James_Thew.Models.db_models.Recipe", "Recipe")
                        .WithMany("ContestEntries")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__ContestEn__Recip__38996AB5");

                    b.HasOne("James_Thew.Models.db_models.Tip", "Tip")
                        .WithMany("ContestEntries")
                        .HasForeignKey("TipId")
                        .HasConstraintName("FK__ContestEn__TipID__398D8EEE");

                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("ContestEntries")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ContestEn__UserI__37A5467C");

                    b.Navigation("Contest");

                    b.Navigation("Recipe");

                    b.Navigation("Tip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Feedback", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.Recipe", "Recipe")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Feedback__Recipe__403A8C7D");

                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Feedback__UserID__3F466844");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Ingredient", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Ingredien__Recip__2B3F6F97");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Recipe", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Recipes__Categor__286302EC");

                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Recipes__UserID__276EDEB3");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Step", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Steps__RecipeID__2E1BDC42");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Tip", b =>
                {
                    b.HasOne("James_Thew.Models.db_models.User", "User")
                        .WithMany("Tips")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Tips__UserID__30F848ED");

                    b.Navigation("User");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Contest", b =>
                {
                    b.Navigation("ContestEntries");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContestEntries");

                    b.Navigation("Feedbacks");

                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.Tip", b =>
                {
                    b.Navigation("ContestEntries");
                });

            modelBuilder.Entity("James_Thew.Models.db_models.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Comments");

                    b.Navigation("ContestEntries");

                    b.Navigation("Contests");

                    b.Navigation("Feedbacks");

                    b.Navigation("Recipes");

                    b.Navigation("Tips");
                });
#pragma warning restore 612, 618
        }
    }
}
